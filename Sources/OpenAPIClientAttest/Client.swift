// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// mTLS endpoints of the GMS
public struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    public init(
        serverURL: URL,
        configuration: Configuration = .init(),
        transport: ClientTransport,
        middlewares: [ClientMiddleware] = []
    ) {
        client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }

    private var converter: Converter { client.converter }
    /// Method to retrieve all device registrations of a user
    ///
    /// - Remark: HTTP `GET /device-registrations`.
    /// - Remark: Generated from `#/paths//device-registrations/get`.
    public func get_device_registrations(_ input: Operations.get_device_registrations.Input)
    async throws -> Operations.get_device_registrations.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_device_registrations.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/device-registrations",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsText(
                    in: &request,
                    name: "userIdentifier",
                    value: input.query.userIdentifier
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_device_registrations.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_device_registrations.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            [Components.Schemas.DeviceRegistration].self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 400:
                    let headers: Operations.get_device_registrations.Output.BadRequest.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_device_registrations.Output.BadRequest.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .badRequest(.init(headers: headers, body: body))
                case 500:
                    let headers:
                        Operations.get_device_registrations.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_device_registrations.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to delete a device registration
    ///
    /// - Remark: HTTP `DELETE /device-registrations`.
    /// - Remark: Generated from `#/paths//device-registrations/delete`.
    public func delete_device_registrations(_ input: Operations.delete_device_registrations.Input)
    async throws -> Operations.delete_device_registrations.Output {
        try await client.send(
            input: input,
            forOperation: Operations.delete_device_registrations.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/device-registrations",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .delete)
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsText(
                    in: &request,
                    name: "userIdentifier",
                    value: input.query.userIdentifier
                )
                try converter.setQueryItemAsText(
                    in: &request,
                    name: "deviceIdentifier",
                    value: input.query.deviceIdentifier
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 204:
                    let headers: Operations.delete_device_registrations.Output.NoContent.Headers =
                        .init()
                    return .noContent(.init(headers: headers, body: nil))
                case 400:
                    let headers: Operations.delete_device_registrations.Output.BadRequest.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.delete_device_registrations.Output.BadRequest.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .badRequest(.init(headers: headers, body: body))
                case 404:
                    let headers: Operations.delete_device_registrations.Output.NotFound.Headers =
                        .init()
                    return .notFound(.init(headers: headers, body: nil))
                case 500:
                    let headers:
                        Operations.delete_device_registrations.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body:
                        Operations.delete_device_registrations.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to trigger a device attestation - returns Authorization Code
    ///
    /// - Remark: HTTP `POST /device-attestation`.
    /// - Remark: Generated from `#/paths//device-attestation/post`.
    public func post_device_attestation(_ input: Operations.post_device_attestation.Input)
    async throws -> Operations.post_device_attestation.Output {
        try await client.send(
            input: input,
            forOperation: Operations.post_device_attestation.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/device-attestation",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .post)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "text/plain"
                )
                request.body = try converter.setRequiredRequestBodyAsJSON(
                    input.body,
                    headerFields: &request.headerFields,
                    transforming: { wrapped in
                        switch wrapped {
                        case let .json(value):
                            return .init(
                                value: value,
                                contentType: "application/json; charset=utf-8"
                            )
                        }
                    }
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.post_device_attestation.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "text/plain"
                    )
                    let body: Operations.post_device_attestation.Output.Ok.Body =
                        try converter.getResponseBodyAsText(
                            Swift.String.self,
                            from: response.body,
                            transforming: { value in .text(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 400:
                    let headers: Operations.post_device_attestation.Output.BadRequest.Headers =
                        .init()
                    return .badRequest(.init(headers: headers, body: nil))
                case 500:
                    let headers:
                        Operations.post_device_attestation.Output.InternalServerError.Headers =
                        .init()
                    return .internalServerError(.init(headers: headers, body: nil))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to obtain a device token
    ///
    /// - Remark: HTTP `POST /device-token`.
    /// - Remark: Generated from `#/paths//device-token/post`.
    public func post_device_token(_ input: Operations.post_device_token.Input) async throws
        -> Operations.post_device_token.Output {
        try await client.send(
            input: input,
            forOperation: Operations.post_device_token.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/device-token",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .post)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                request.body = try converter.setRequiredRequestBodyAsBinary(
                    input.body,
                    headerFields: &request.headerFields,
                    transforming: { wrapped in
                        switch wrapped {
                        case let .binary(value):
                            return .init(
                                value: value,
                                contentType: "application/x-www-form-urlencoded"
                            )
                        }
                    }
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.post_device_token.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.post_device_token.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.DeviceTokenResponse.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 202:
                    let headers: Operations.post_device_token.Output.Accepted.Headers = .init()
                    return .accepted(.init(headers: headers, body: nil))
                case 400:
                    let headers: Operations.post_device_token.Output.BadRequest.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.post_device_token.Output.BadRequest.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .badRequest(.init(headers: headers, body: body))
                case 500:
                    let headers: Operations.post_device_token.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.post_device_token.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }
}
