// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Method to retrieve all device registrations of a user
    ///
    /// - Remark: HTTP `GET /device-registrations`.
    /// - Remark: Generated from `#/paths//device-registrations/get`.
    func get_device_registrations(_ input: Operations.get_device_registrations.Input) async throws
        -> Operations.get_device_registrations.Output
    /// Method to delete a device registration
    ///
    /// - Remark: HTTP `DELETE /device-registrations`.
    /// - Remark: Generated from `#/paths//device-registrations/delete`.
    func delete_device_registrations(_ input: Operations.delete_device_registrations.Input)
    async throws -> Operations.delete_device_registrations.Output
    /// Method to trigger a device attestation - returns Authorization Code
    ///
    /// - Remark: HTTP `POST /device-attestation`.
    /// - Remark: Generated from `#/paths//device-attestation/post`.
    func post_device_attestation(_ input: Operations.post_device_attestation.Input) async throws
        -> Operations.post_device_attestation.Output
    /// Method to obtain a device token
    ///
    /// - Remark: HTTP `POST /device-token`.
    /// - Remark: Generated from `#/paths//device-token/post`.
    func post_device_token(_ input: Operations.post_device_token.Input) async throws
        -> Operations.post_device_token.Output
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// LTU DEV environment
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://dsr.gms-mtls.dev.gematik.solutions")
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/DeviceRegistration`.
        public struct DeviceRegistration: Codable, Equatable, Hashable, Sendable {
            /// The identifier of the user (e.g. KVNR)
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRegistration/userIdentifier`.
            public var userIdentifier: Swift.String
            /// The identifier of the device
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRegistration/deviceIdentifier`.
            public var deviceIdentifier: Swift.String
            /// Type of the device
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRegistration/deviceType`.
            @frozen
            public enum deviceTypePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case IOS
                case ANDROID
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "IOS": self = .IOS
                    case "ANDROID": self = .ANDROID
                    default: self = .undocumented(rawValue)
                    }
                }

                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .IOS: return "IOS"
                    case .ANDROID: return "ANDROID"
                    }
                }

                public static var allCases: [deviceTypePayload] { [.IOS, .ANDROID] }
            }

            /// Type of the device
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRegistration/deviceType`.
            public var deviceType: Components.Schemas.DeviceRegistration.deviceTypePayload
            /// Creation timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceRegistration/createdAt`.
            public var createdAt: Foundation.Date
            /// Creates a new `DeviceRegistration`.
            ///
            /// - Parameters:
            ///   - userIdentifier: The identifier of the user (e.g. KVNR)
            ///   - deviceIdentifier: The identifier of the device
            ///   - deviceType: Type of the device
            ///   - createdAt: Creation timestamp
            public init(
                userIdentifier: Swift.String,
                deviceIdentifier: Swift.String,
                deviceType: Components.Schemas.DeviceRegistration.deviceTypePayload,
                createdAt: Foundation.Date
            ) {
                self.userIdentifier = userIdentifier
                self.deviceIdentifier = deviceIdentifier
                self.deviceType = deviceType
                self.createdAt = createdAt
            }

            public enum CodingKeys: String, CodingKey {
                case userIdentifier
                case deviceIdentifier
                case deviceType
                case createdAt
            }
        }

        /// - Remark: Generated from `#/components/schemas/DeviceAttestationRequest`.
        public struct DeviceAttestationRequest: Codable, Equatable, Hashable, Sendable {
            /// Device Attestation Token
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceAttestationRequest/token`.
            public var token: Swift.String
            /// PKCE Code Challenge
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceAttestationRequest/codeChallenge`.
            public var codeChallenge: Swift.String
            /// Creates a new `DeviceAttestationRequest`.
            ///
            /// - Parameters:
            ///   - token: Device Attestation Token
            ///   - codeChallenge: PKCE Code Challenge
            public init(token: Swift.String, codeChallenge: Swift.String) {
                self.token = token
                self.codeChallenge = codeChallenge
            }

            public enum CodingKeys: String, CodingKey {
                case token
                case codeChallenge
            }
        }

        /// - Remark: Generated from `#/components/schemas/DeviceTokenResponse`.
        public struct DeviceTokenResponse: Codable, Equatable, Hashable, Sendable {
            /// Device Token - JWT
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceTokenResponse/token`.
            public var token: Swift.String
            /// Creates a new `DeviceTokenResponse`.
            ///
            /// - Parameters:
            ///   - token: Device Token - JWT
            public init(token: Swift.String) { self.token = token }
            public enum CodingKeys: String, CodingKey { case token }
        }

        /// - Remark: Generated from `#/components/schemas/WebServiceError`.
        public struct WebServiceError: Codable, Equatable, Hashable, Sendable {
            /// Identifier / code of the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/errorCode`.
            public var errorCode: Swift.String
            /// Description of the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/description`.
            public var description: Swift.String
            /// Id to track the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/traceId`.
            public var traceId: Swift.String
            /// Creates a new `WebServiceError`.
            ///
            /// - Parameters:
            ///   - errorCode: Identifier / code of the error / exception
            ///   - description: Description of the error / exception
            ///   - traceId: Id to track the error / exception
            public init(errorCode: Swift.String, description: Swift.String, traceId: Swift.String) {
                self.errorCode = errorCode
                self.description = description
                self.traceId = traceId
            }

            public enum CodingKeys: String, CodingKey {
                case errorCode
                case description
                case traceId
            }
        }
    }

    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Method to retrieve all device registrations of a user
    ///
    /// - Remark: HTTP `GET /device-registrations`.
    /// - Remark: Generated from `#/paths//device-registrations/get`.
    public enum get_device_registrations {
        public static let id: String = "get/device-registrations"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.get_device_registrations.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var userIdentifier: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - userIdentifier:
                public init(userIdentifier: Swift.String) { self.userIdentifier = userIdentifier }
            }

            public var query: Operations.get_device_registrations.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }

            public var headers: Operations.get_device_registrations.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_device_registrations.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_device_registrations.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_device_registrations.Input.Path = .init(),
                query: Operations.get_device_registrations.Input.Query,
                headers: Operations.get_device_registrations.Input.Headers = .init(),
                cookies: Operations.get_device_registrations.Input.Cookies = .init(),
                body: Operations.get_device_registrations.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_device_registrations.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.DeviceRegistration])
                }

                /// Received HTTP response body
                public var body: Operations.get_device_registrations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_device_registrations.Output.Ok.Headers = .init(),
                    body: Operations.get_device_registrations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// List of device registration of the given user
            ///
            /// - Remark: Generated from `#/paths//device-registrations/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_device_registrations.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_device_registrations.Output.BadRequest.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_device_registrations.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_device_registrations.Output.BadRequest.Headers =
                        .init(),
                    body: Operations.get_device_registrations.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//device-registrations/get/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.get_device_registrations.Output.BadRequest)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.get_device_registrations.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_device_registrations.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_device_registrations.Output.InternalServerError
                        .Headers = .init(),
                    body: Operations.get_device_registrations.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//device-registrations/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_device_registrations.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to delete a device registration
    ///
    /// - Remark: HTTP `DELETE /device-registrations`.
    /// - Remark: Generated from `#/paths//device-registrations/delete`.
    public enum delete_device_registrations {
        public static let id: String = "delete/device-registrations"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.delete_device_registrations.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var userIdentifier: Swift.String
                public var deviceIdentifier: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - userIdentifier:
                ///   - deviceIdentifier:
                public init(userIdentifier: Swift.String, deviceIdentifier: Swift.String) {
                    self.userIdentifier = userIdentifier
                    self.deviceIdentifier = deviceIdentifier
                }
            }

            public var query: Operations.delete_device_registrations.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }

            public var headers: Operations.delete_device_registrations.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.delete_device_registrations.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.delete_device_registrations.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.delete_device_registrations.Input.Path = .init(),
                query: Operations.delete_device_registrations.Input.Query,
                headers: Operations.delete_device_registrations.Input.Headers = .init(),
                cookies: Operations.delete_device_registrations.Input.Cookies = .init(),
                body: Operations.delete_device_registrations.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.delete_device_registrations.Output.NoContent.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.delete_device_registrations.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.delete_device_registrations.Output.NoContent.Headers =
                        .init(),
                    body: Operations.delete_device_registrations.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Device registration successfully deleted
            ///
            /// - Remark: Generated from `#/paths//device-registrations/delete/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.delete_device_registrations.Output.NoContent)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.delete_device_registrations.Output.BadRequest.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.delete_device_registrations.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.delete_device_registrations.Output.BadRequest.Headers =
                        .init(),
                    body: Operations.delete_device_registrations.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//device-registrations/delete/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.delete_device_registrations.Output.BadRequest)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.delete_device_registrations.Output.NotFound.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.delete_device_registrations.Output.NotFound.Body?
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.delete_device_registrations.Output.NotFound.Headers =
                        .init(),
                    body: Operations.delete_device_registrations.Output.NotFound.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Device registration not found
            ///
            /// - Remark: Generated from `#/paths//device-registrations/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.delete_device_registrations.Output.NotFound)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.delete_device_registrations.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body:
                    Operations.delete_device_registrations.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.delete_device_registrations.Output.InternalServerError
                        .Headers = .init(),
                    body: Operations.delete_device_registrations.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//device-registrations/delete/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(
                Operations.delete_device_registrations.Output.InternalServerError
            )
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to trigger a device attestation - returns Authorization Code
    ///
    /// - Remark: HTTP `POST /device-attestation`.
    /// - Remark: Generated from `#/paths//device-attestation/post`.
    public enum post_device_attestation {
        public static let id: String = "post/device-attestation"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.post_device_attestation.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.post_device_attestation.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }

            public var headers: Operations.post_device_attestation.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.post_device_attestation.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.DeviceAttestationRequest)
            }

            public var body: Operations.post_device_attestation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.post_device_attestation.Input.Path = .init(),
                query: Operations.post_device_attestation.Input.Query = .init(),
                headers: Operations.post_device_attestation.Input.Headers = .init(),
                cookies: Operations.post_device_attestation.Input.Cookies = .init(),
                body: Operations.post_device_attestation.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_device_attestation.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable { case text(Swift.String) }
                /// Received HTTP response body
                public var body: Operations.post_device_attestation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_attestation.Output.Ok.Headers = .init(),
                    body: Operations.post_device_attestation.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Authorization Code - Device AttestationToken verified
            ///
            /// - Remark: Generated from `#/paths//device-attestation/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_device_attestation.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_device_attestation.Output.BadRequest.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.post_device_attestation.Output.BadRequest.Body?
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_attestation.Output.BadRequest.Headers = .init(),
                    body: Operations.post_device_attestation.Output.BadRequest.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Bad Request - Device Attestation Token invalid
            ///
            /// - Remark: Generated from `#/paths//device-attestation/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.post_device_attestation.Output.BadRequest)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.post_device_attestation.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.post_device_attestation.Output.InternalServerError.Body?
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_attestation.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.post_device_attestation.Output.InternalServerError.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//device-attestation/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.post_device_attestation.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to obtain a device token
    ///
    /// - Remark: HTTP `POST /device-token`.
    /// - Remark: Generated from `#/paths//device-token/post`.
    public enum post_device_token {
        public static let id: String = "post/device-token"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.post_device_token.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.post_device_token.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }

            public var headers: Operations.post_device_token.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.post_device_token.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable { case binary(Foundation.Data) }
            public var body: Operations.post_device_token.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.post_device_token.Input.Path = .init(),
                query: Operations.post_device_token.Input.Query = .init(),
                headers: Operations.post_device_token.Input.Headers = .init(),
                cookies: Operations.post_device_token.Input.Cookies = .init(),
                body: Operations.post_device_token.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_device_token.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.DeviceTokenResponse)
                }

                /// Received HTTP response body
                public var body: Operations.post_device_token.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_token.Output.Ok.Headers = .init(),
                    body: Operations.post_device_token.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// OK
            ///
            /// - Remark: Generated from `#/paths//device-token/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_device_token.Output.Ok)
            public struct Accepted: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_device_token.Output.Accepted.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.post_device_token.Output.Accepted.Body?
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_token.Output.Accepted.Headers = .init(),
                    body: Operations.post_device_token.Output.Accepted.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Processing of Device Attestation Token still in progress
            ///
            /// - Remark: Generated from `#/paths//device-token/post/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.post_device_token.Output.Accepted)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_device_token.Output.BadRequest.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.post_device_token.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_token.Output.BadRequest.Headers = .init(),
                    body: Operations.post_device_token.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//device-token/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.post_device_token.Output.BadRequest)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_device_token.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.post_device_token.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_device_token.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.post_device_token.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//device-token/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.post_device_token.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
