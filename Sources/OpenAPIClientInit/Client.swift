// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// TLS endpoints of the GMS
public struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    public init(
        serverURL: URL,
        configuration: Configuration = .init(),
        transport: ClientTransport,
        middlewares: [ClientMiddleware] = []
    ) {
        client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }

    private var converter: Converter { client.converter }
    /// Method to obtain a nonce
    ///
    /// - Remark: HTTP `GET /nonce`.
    /// - Remark: Generated from `#/paths//nonce/get`.
    public func get_nonce(_ input: Operations.get_nonce.Input) async throws
        -> Operations.get_nonce.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_nonce.id,
            serializer: { _ in
                let path = try converter.renderedRequestPath(template: "/nonce", parameters: [])
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "text/plain"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_nonce.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "text/plain"
                    )
                    let body: Operations.get_nonce.Output.Ok.Body =
                        try converter.getResponseBodyAsText(
                            Swift.String.self,
                            from: response.body,
                            transforming: { value in .text(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 500:
                    let headers: Operations.get_nonce.Output.InternalServerError.Headers = .init()
                    return .internalServerError(.init(headers: headers, body: nil))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to register a device
    ///
    /// - Remark: HTTP `POST /register-device`.
    /// - Remark: Generated from `#/paths//register-device/post`.
    public func post_register_device(_ input: Operations.post_register_device.Input) async throws
        -> Operations.post_register_device.Output {
        try await client.send(
            input: input,
            forOperation: Operations.post_register_device.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/register-device",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .post)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                request.body = try converter.setRequiredRequestBodyAsJSON(
                    input.body,
                    headerFields: &request.headerFields,
                    transforming: { wrapped in
                        switch wrapped {
                        case let .json(value):
                            return .init(
                                value: value,
                                contentType: "application/json; charset=utf-8"
                            )
                        }
                    }
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 201:
                    let headers: Operations.post_register_device.Output.Created.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.post_register_device.Output.Created.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.RegisterDeviceResponse.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .created(.init(headers: headers, body: body))
                case 400:
                    let headers: Operations.post_register_device.Output.BadRequest.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.post_register_device.Output.BadRequest.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .badRequest(.init(headers: headers, body: body))
                case 500:
                    let headers:
                        Operations.post_register_device.Output.InternalServerError.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.post_register_device.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }
}
