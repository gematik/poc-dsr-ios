// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Method to obtain a nonce
    ///
    /// - Remark: HTTP `GET /nonce`.
    /// - Remark: Generated from `#/paths//nonce/get`.
    func get_nonce(_ input: Operations.get_nonce.Input) async throws -> Operations.get_nonce.Output
    /// Method to register a device
    ///
    /// - Remark: HTTP `POST /register-device`.
    /// - Remark: Generated from `#/paths//register-device/post`.
    func post_register_device(_ input: Operations.post_register_device.Input) async throws
        -> Operations.post_register_device.Output
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// LTU DEV environment
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://dsr.gms.dev.gematik.solutions")
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/RegisterDeviceRequest`.
        public struct RegisterDeviceRequest: Codable, Equatable, Hashable, Sendable {
            /// Device Registration Token
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterDeviceRequest/token`.
            public var token: Swift.String
            /// Creates a new `RegisterDeviceRequest`.
            ///
            /// - Parameters:
            ///   - token: Device Registration Token
            public init(token: Swift.String) { self.token = token }
            public enum CodingKeys: String, CodingKey { case token }
        }

        /// - Remark: Generated from `#/components/schemas/RegisterDeviceResponse`.
        public struct RegisterDeviceResponse: Codable, Equatable, Hashable, Sendable {
            /// mTLS certificate - base64 DER
            ///
            /// - Remark: Generated from `#/components/schemas/RegisterDeviceResponse/cert`.
            public var cert: Swift.String
            /// Creates a new `RegisterDeviceResponse`.
            ///
            /// - Parameters:
            ///   - cert: mTLS certificate - base64 DER
            public init(cert: Swift.String) { self.cert = cert }
            public enum CodingKeys: String, CodingKey { case cert }
        }

        /// - Remark: Generated from `#/components/schemas/WebServiceError`.
        public struct WebServiceError: Codable, Equatable, Hashable, Sendable {
            /// Identifier / code of the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/errorCode`.
            public var errorCode: Swift.String
            /// Description of the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/description`.
            public var description: Swift.String
            /// Id to track the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/traceId`.
            public var traceId: Swift.String
            /// Creates a new `WebServiceError`.
            ///
            /// - Parameters:
            ///   - errorCode: Identifier / code of the error / exception
            ///   - description: Description of the error / exception
            ///   - traceId: Id to track the error / exception
            public init(errorCode: Swift.String, description: Swift.String, traceId: Swift.String) {
                self.errorCode = errorCode
                self.description = description
                self.traceId = traceId
            }

            public enum CodingKeys: String, CodingKey {
                case errorCode
                case description
                case traceId
            }
        }
    }

    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Method to obtain a nonce
    ///
    /// - Remark: HTTP `GET /nonce`.
    /// - Remark: Generated from `#/paths//nonce/get`.
    public enum get_nonce {
        public static let id: String = "get/nonce"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.get_nonce.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.get_nonce.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }

            public var headers: Operations.get_nonce.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_nonce.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_nonce.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_nonce.Input.Path = .init(),
                query: Operations.get_nonce.Input.Query = .init(),
                headers: Operations.get_nonce.Input.Headers = .init(),
                cookies: Operations.get_nonce.Input.Cookies = .init(),
                body: Operations.get_nonce.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_nonce.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable { case text(Swift.String) }
                /// Received HTTP response body
                public var body: Operations.get_nonce.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_nonce.Output.Ok.Headers = .init(),
                    body: Operations.get_nonce.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Nonce successfully created
            ///
            /// - Remark: Generated from `#/paths//nonce/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_nonce.Output.Ok)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_nonce.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.get_nonce.Output.InternalServerError.Body?
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_nonce.Output.InternalServerError.Headers = .init(),
                    body: Operations.get_nonce.Output.InternalServerError.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//nonce/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_nonce.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to register a device
    ///
    /// - Remark: HTTP `POST /register-device`.
    /// - Remark: Generated from `#/paths//register-device/post`.
    public enum post_register_device {
        public static let id: String = "post/register-device"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.post_register_device.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.post_register_device.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }

            public var headers: Operations.post_register_device.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.post_register_device.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.RegisterDeviceRequest)
            }

            public var body: Operations.post_register_device.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.post_register_device.Input.Path = .init(),
                query: Operations.post_register_device.Input.Query = .init(),
                headers: Operations.post_register_device.Input.Headers = .init(),
                cookies: Operations.post_register_device.Input.Cookies = .init(),
                body: Operations.post_register_device.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Created: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_register_device.Output.Created.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.RegisterDeviceResponse)
                }

                /// Received HTTP response body
                public var body: Operations.post_register_device.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_register_device.Output.Created.Headers = .init(),
                    body: Operations.post_register_device.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Device successfully registered
            ///
            /// - Remark: Generated from `#/paths//register-device/post/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.post_register_device.Output.Created)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.post_register_device.Output.BadRequest.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.post_register_device.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_register_device.Output.BadRequest.Headers = .init(),
                    body: Operations.post_register_device.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//register-device/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.post_register_device.Output.BadRequest)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.post_register_device.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.post_register_device.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.post_register_device.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.post_register_device.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//register-device/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.post_register_device.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
