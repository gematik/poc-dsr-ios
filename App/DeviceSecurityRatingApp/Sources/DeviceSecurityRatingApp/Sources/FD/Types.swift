// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get all E-Rezepte
    ///
    /// - Remark: HTTP `GET /api/v1/erezept`.
    /// - Remark: Generated from `#/paths//api/v1/erezept/get`.
    func get_api_v1_erezept(_ input: Operations.get_api_v1_erezept.Input) async throws
        -> Operations.get_api_v1_erezept.Output
    /// Method to get a E-Rezept by Id
    ///
    /// - Remark: HTTP `GET /api/v1/erezept/{id}`.
    /// - Remark: Generated from `#/paths//api/v1/erezept/{id}/get`.
    func get_api_v1_erezept__id_(_ input: Operations.get_api_v1_erezept__id_.Input) async throws
        -> Operations.get_api_v1_erezept__id_.Output
    /// Get all E-Rezepte
    ///
    /// - Remark: HTTP `GET /api/v2/erezept`.
    /// - Remark: Generated from `#/paths//api/v2/erezept/get`.
    func get_api_v2_erezept(_ input: Operations.get_api_v2_erezept.Input) async throws
        -> Operations.get_api_v2_erezept.Output
    /// Method to get a E-Rezept by Id
    ///
    /// - Remark: HTTP `GET /api/v2/erezept/{id}`.
    /// - Remark: Generated from `#/paths//api/v2/erezept/{id}/get`.
    func get_api_v2_erezept__id_(_ input: Operations.get_api_v2_erezept__id_.Input) async throws
        -> Operations.get_api_v2_erezept__id_.Output
    /// Method to get Notfalldaten by patient identifier
    ///
    /// - Remark: HTTP `GET /api/v1/notfalldaten`.
    /// - Remark: Generated from `#/paths//api/v1/notfalldaten/get`.
    func get_api_v1_notfalldaten(_ input: Operations.get_api_v1_notfalldaten.Input) async throws
        -> Operations.get_api_v1_notfalldaten.Output
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "http://localhost:8080")
    }

    /// LTU DEV environment
    public static func server2() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://dsr.fd.dev.gematik.solutions")
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ERezept_v1`.
        public struct ERezept_v1: Codable, Equatable, Hashable, Sendable {
            /// E-Rezept identifier
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/id`.
            public var id: Swift.String
            /// E-Rezept issued at
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/issuedAt`.
            public var issuedAt: Foundation.Date
            /// The patient of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/patient`.
            public struct patientPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/patient/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/patient/address`.
                public var address: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/patient/contact`.
                public var contact: Swift.String?
                /// Creates a new `patientPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - address:
                ///   - contact:
                public init(
                    name: Swift.String,
                    address: Swift.String? = nil,
                    contact: Swift.String? = nil
                ) {
                    self.name = name
                    self.address = address
                    self.contact = contact
                }

                public enum CodingKeys: String, CodingKey {
                    case name
                    case address
                    case contact
                }
            }

            /// The patient of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/patient`.
            public var patient: Components.Schemas.ERezept_v1.patientPayload
            /// The doctor of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/doctor`.
            public struct doctorPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/doctor/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/doctor/address`.
                public var address: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/doctor/contact`.
                public var contact: Swift.String?
                /// Creates a new `doctorPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - address:
                ///   - contact:
                public init(
                    name: Swift.String,
                    address: Swift.String? = nil,
                    contact: Swift.String? = nil
                ) {
                    self.name = name
                    self.address = address
                    self.contact = contact
                }

                public enum CodingKeys: String, CodingKey {
                    case name
                    case address
                    case contact
                }
            }

            /// The doctor of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/doctor`.
            public var doctor: Components.Schemas.ERezept_v1.doctorPayload
            /// Prescription of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/prescription`.
            public struct prescriptionPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/prescription/medication`.
                public var medication: Swift.String
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/prescription/strength`.
                public var strength: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/prescription/packSize`.
                public var packSize: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v1/prescription/dosageInstruction`.
                public var dosageInstruction: Swift.String?
                /// Creates a new `prescriptionPayload`.
                ///
                /// - Parameters:
                ///   - medication:
                ///   - strength:
                ///   - packSize:
                ///   - dosageInstruction:
                public init(
                    medication: Swift.String,
                    strength: Swift.String? = nil,
                    packSize: Swift.String? = nil,
                    dosageInstruction: Swift.String? = nil
                ) {
                    self.medication = medication
                    self.strength = strength
                    self.packSize = packSize
                    self.dosageInstruction = dosageInstruction
                }

                public enum CodingKeys: String, CodingKey {
                    case medication
                    case strength
                    case packSize
                    case dosageInstruction
                }
            }

            /// Prescription of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v1/prescription`.
            public var prescription: Components.Schemas.ERezept_v1.prescriptionPayload
            /// Creates a new `ERezept_v1`.
            ///
            /// - Parameters:
            ///   - id: E-Rezept identifier
            ///   - issuedAt: E-Rezept issued at
            ///   - patient: The patient of the E-Rezept
            ///   - doctor: The doctor of the E-Rezept
            ///   - prescription: Prescription of the E-Rezept
            public init(
                id: Swift.String,
                issuedAt: Foundation.Date,
                patient: Components.Schemas.ERezept_v1.patientPayload,
                doctor: Components.Schemas.ERezept_v1.doctorPayload,
                prescription: Components.Schemas.ERezept_v1.prescriptionPayload
            ) {
                self.id = id
                self.issuedAt = issuedAt
                self.patient = patient
                self.doctor = doctor
                self.prescription = prescription
            }

            public enum CodingKeys: String, CodingKey {
                case id
                case issuedAt
                case patient
                case doctor
                case prescription
            }
        }

        /// - Remark: Generated from `#/components/schemas/ERezept_v2`.
        public struct ERezept_v2: Codable, Equatable, Hashable, Sendable {
            /// E-Rezept identifier
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/id`.
            public var id: Swift.String
            /// E-Rezept issued at
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/issuedAt`.
            public var issuedAt: Foundation.Date
            /// The patient of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient`.
            public struct patientPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/name`.
                public var name: Swift.String
                /// The address of the E-Rezept patient
                ///
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/address`.
                public struct addressPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/address/street`.
                    public var street: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/address/city`.
                    public var city: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/address/postCode`.
                    public var postCode: Swift.String
                    /// Creates a new `addressPayload`.
                    ///
                    /// - Parameters:
                    ///   - street:
                    ///   - city:
                    ///   - postCode:
                    public init(street: Swift.String, city: Swift.String, postCode: Swift.String) {
                        self.street = street
                        self.city = city
                        self.postCode = postCode
                    }

                    public enum CodingKeys: String, CodingKey {
                        case street
                        case city
                        case postCode
                    }
                }

                /// The address of the E-Rezept patient
                ///
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/address`.
                public var address: Components.Schemas.ERezept_v2.patientPayload.addressPayload?
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient/contact`.
                public var contact: Swift.String?
                /// Creates a new `patientPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - address: The address of the E-Rezept patient
                ///   - contact:
                public init(
                    name: Swift.String,
                    address: Components.Schemas.ERezept_v2.patientPayload.addressPayload? = nil,
                    contact: Swift.String? = nil
                ) {
                    self.name = name
                    self.address = address
                    self.contact = contact
                }

                public enum CodingKeys: String, CodingKey {
                    case name
                    case address
                    case contact
                }
            }

            /// The patient of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/patient`.
            public var patient: Components.Schemas.ERezept_v2.patientPayload
            /// The doctor of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor`.
            public struct doctorPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/name`.
                public var name: Swift.String
                /// The address of the E-Rezept doctor
                ///
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/address`.
                public struct addressPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/address/street`.
                    public var street: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/address/city`.
                    public var city: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/address/postCode`.
                    public var postCode: Swift.String
                    /// Creates a new `addressPayload`.
                    ///
                    /// - Parameters:
                    ///   - street:
                    ///   - city:
                    ///   - postCode:
                    public init(street: Swift.String, city: Swift.String, postCode: Swift.String) {
                        self.street = street
                        self.city = city
                        self.postCode = postCode
                    }

                    public enum CodingKeys: String, CodingKey {
                        case street
                        case city
                        case postCode
                    }
                }

                /// The address of the E-Rezept doctor
                ///
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/address`.
                public var address: Components.Schemas.ERezept_v2.doctorPayload.addressPayload?
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor/contact`.
                public var contact: Swift.String?
                /// Creates a new `doctorPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - address: The address of the E-Rezept doctor
                ///   - contact:
                public init(
                    name: Swift.String,
                    address: Components.Schemas.ERezept_v2.doctorPayload.addressPayload? = nil,
                    contact: Swift.String? = nil
                ) {
                    self.name = name
                    self.address = address
                    self.contact = contact
                }

                public enum CodingKeys: String, CodingKey {
                    case name
                    case address
                    case contact
                }
            }

            /// The doctor of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/doctor`.
            public var doctor: Components.Schemas.ERezept_v2.doctorPayload
            /// Prescription of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription`.
            public struct prescriptionPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription/medication`.
                public var medication: Swift.String
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription/strength`.
                public var strength: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription/packSize`.
                public var packSize: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription/dosageInstruction`.
                public var dosageInstruction: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription/specialRequirements`.
                public var specialRequirements: Swift.String?
                /// Creates a new `prescriptionPayload`.
                ///
                /// - Parameters:
                ///   - medication:
                ///   - strength:
                ///   - packSize:
                ///   - dosageInstruction:
                ///   - specialRequirements:
                public init(
                    medication: Swift.String,
                    strength: Swift.String? = nil,
                    packSize: Swift.String? = nil,
                    dosageInstruction: Swift.String? = nil,
                    specialRequirements: Swift.String? = nil
                ) {
                    self.medication = medication
                    self.strength = strength
                    self.packSize = packSize
                    self.dosageInstruction = dosageInstruction
                    self.specialRequirements = specialRequirements
                }

                public enum CodingKeys: String, CodingKey {
                    case medication
                    case strength
                    case packSize
                    case dosageInstruction
                    case specialRequirements
                }
            }

            /// Prescription of the E-Rezept
            ///
            /// - Remark: Generated from `#/components/schemas/ERezept_v2/prescription`.
            public var prescription: Components.Schemas.ERezept_v2.prescriptionPayload
            /// Creates a new `ERezept_v2`.
            ///
            /// - Parameters:
            ///   - id: E-Rezept identifier
            ///   - issuedAt: E-Rezept issued at
            ///   - patient: The patient of the E-Rezept
            ///   - doctor: The doctor of the E-Rezept
            ///   - prescription: Prescription of the E-Rezept
            public init(
                id: Swift.String,
                issuedAt: Foundation.Date,
                patient: Components.Schemas.ERezept_v2.patientPayload,
                doctor: Components.Schemas.ERezept_v2.doctorPayload,
                prescription: Components.Schemas.ERezept_v2.prescriptionPayload
            ) {
                self.id = id
                self.issuedAt = issuedAt
                self.patient = patient
                self.doctor = doctor
                self.prescription = prescription
            }

            public enum CodingKeys: String, CodingKey {
                case id
                case issuedAt
                case patient
                case doctor
                case prescription
            }
        }

        /// - Remark: Generated from `#/components/schemas/Notfalldaten`.
        public struct Notfalldaten: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Notfalldaten/patientIdentifier`.
            public var patientIdentifier: Swift.String
            /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient`.
            public struct patientPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/dateOfBirth`.
                public var dateOfBirth: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/bloodGroup`.
                public var bloodGroup: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/allergies`.
                public var allergies: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/medications`.
                public var medications: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/medicalDiagnoses`.
                public var medicalDiagnoses: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/pastMedicalHistory`.
                public var pastMedicalHistory: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/emergencyContactsPayload`.
                public struct emergencyContactsPayloadPayload: Codable, Equatable, Hashable,
                    Sendable
                {
                    /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/emergencyContactsPayload/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/emergencyContactsPayload/relationship`.
                    public var relationship: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/emergencyContactsPayload/phone`.
                    public var phone: Swift.String
                    /// Creates a new `emergencyContactsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - relationship:
                    ///   - phone:
                    public init(
                        name: Swift.String,
                        relationship: Swift.String? = nil,
                        phone: Swift.String
                    ) {
                        self.name = name
                        self.relationship = relationship
                        self.phone = phone
                    }

                    public enum CodingKeys: String, CodingKey {
                        case name
                        case relationship
                        case phone
                    }
                }

                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/emergencyContacts`.
                public typealias emergencyContactsPayload = [Components.Schemas.Notfalldaten
                    .patientPayload.emergencyContactsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/emergencyContacts`.
                public var emergencyContacts:
                    Components.Schemas.Notfalldaten.patientPayload.emergencyContactsPayload?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/insuranceInformation`.
                public struct insuranceInformationPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/insuranceInformation/insuranceCompany`.
                    public var insuranceCompany: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/insuranceInformation/policyNumber`.
                    public var policyNumber: Swift.String?
                    /// Creates a new `insuranceInformationPayload`.
                    ///
                    /// - Parameters:
                    ///   - insuranceCompany:
                    ///   - policyNumber:
                    public init(
                        insuranceCompany: Swift.String? = nil,
                        policyNumber: Swift.String? = nil
                    ) {
                        self.insuranceCompany = insuranceCompany
                        self.policyNumber = policyNumber
                    }

                    public enum CodingKeys: String, CodingKey {
                        case insuranceCompany
                        case policyNumber
                    }
                }

                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/insuranceInformation`.
                public var insuranceInformation:
                    Components.Schemas.Notfalldaten.patientPayload.insuranceInformationPayload?
                /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient/organDonation`.
                public var organDonation: Swift.Bool?
                /// Creates a new `patientPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - dateOfBirth:
                ///   - bloodGroup:
                ///   - allergies:
                ///   - medications:
                ///   - medicalDiagnoses:
                ///   - pastMedicalHistory:
                ///   - emergencyContacts:
                ///   - insuranceInformation:
                ///   - organDonation:
                public init(
                    name: Swift.String,
                    dateOfBirth: Foundation.Date? = nil,
                    bloodGroup: Swift.String? = nil,
                    allergies: [Swift.String]? = nil,
                    medications: [Swift.String]? = nil,
                    medicalDiagnoses: [Swift.String]? = nil,
                    pastMedicalHistory: [Swift.String]? = nil,
                    emergencyContacts: Components.Schemas.Notfalldaten.patientPayload
                        .emergencyContactsPayload? = nil,
                    insuranceInformation: Components.Schemas.Notfalldaten.patientPayload
                        .insuranceInformationPayload? = nil,
                    organDonation: Swift.Bool? = nil
                ) {
                    self.name = name
                    self.dateOfBirth = dateOfBirth
                    self.bloodGroup = bloodGroup
                    self.allergies = allergies
                    self.medications = medications
                    self.medicalDiagnoses = medicalDiagnoses
                    self.pastMedicalHistory = pastMedicalHistory
                    self.emergencyContacts = emergencyContacts
                    self.insuranceInformation = insuranceInformation
                    self.organDonation = organDonation
                }

                public enum CodingKeys: String, CodingKey {
                    case name
                    case dateOfBirth
                    case bloodGroup
                    case allergies
                    case medications
                    case medicalDiagnoses
                    case pastMedicalHistory
                    case emergencyContacts
                    case insuranceInformation
                    case organDonation
                }
            }

            /// - Remark: Generated from `#/components/schemas/Notfalldaten/patient`.
            public var patient: Components.Schemas.Notfalldaten.patientPayload
            /// Creates a new `Notfalldaten`.
            ///
            /// - Parameters:
            ///   - patientIdentifier:
            ///   - patient:
            public init(
                patientIdentifier: Swift.String,
                patient: Components.Schemas.Notfalldaten.patientPayload
            ) {
                self.patientIdentifier = patientIdentifier
                self.patient = patient
            }

            public enum CodingKeys: String, CodingKey {
                case patientIdentifier
                case patient
            }
        }

        /// - Remark: Generated from `#/components/schemas/WebServiceError`.
        public struct WebServiceError: Codable, Equatable, Hashable, Sendable {
            /// Identifier / code of the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/errorCode`.
            public var errorCode: Swift.String
            /// Description of the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/description`.
            public var description: Swift.String
            /// Id to track the error / exception
            ///
            /// - Remark: Generated from `#/components/schemas/WebServiceError/traceId`.
            public var traceId: Swift.String
            /// Creates a new `WebServiceError`.
            ///
            /// - Parameters:
            ///   - errorCode: Identifier / code of the error / exception
            ///   - description: Description of the error / exception
            ///   - traceId: Id to track the error / exception
            public init(errorCode: Swift.String, description: Swift.String, traceId: Swift.String) {
                self.errorCode = errorCode
                self.description = description
                self.traceId = traceId
            }

            public enum CodingKeys: String, CodingKey {
                case errorCode
                case description
                case traceId
            }
        }
    }

    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// DSR Device-Token
        ///
        /// - Remark: Generated from `#/components/parameters/X-Device-Token-Header`.
        public typealias X_Device_Token_Header = Swift.String
    }

    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get all E-Rezepte
    ///
    /// - Remark: HTTP `GET /api/v1/erezept`.
    /// - Remark: Generated from `#/paths//api/v1/erezept/get`.
    public enum get_api_v1_erezept {
        public static let id: String = "get/api/v1/erezept"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.get_api_v1_erezept.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.get_api_v1_erezept.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_Device_Token: Components.Parameters.X_Device_Token_Header
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_Device_Token:
                public init(X_Device_Token: Components.Parameters.X_Device_Token_Header) {
                    self.X_Device_Token = X_Device_Token
                }
            }

            public var headers: Operations.get_api_v1_erezept.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_api_v1_erezept.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_api_v1_erezept.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_api_v1_erezept.Input.Path = .init(),
                query: Operations.get_api_v1_erezept.Input.Query = .init(),
                headers: Operations.get_api_v1_erezept.Input.Headers,
                cookies: Operations.get_api_v1_erezept.Input.Cookies = .init(),
                body: Operations.get_api_v1_erezept.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v1_erezept.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.ERezept_v1])
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v1_erezept.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_erezept.Output.Ok.Headers = .init(),
                    body: Operations.get_api_v1_erezept.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Returns a list of E-Rezepte
            ///
            /// - Remark: Generated from `#/paths//api/v1/erezept/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_api_v1_erezept.Output.Ok)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v1_erezept.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v1_erezept.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_erezept.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.get_api_v1_erezept.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//api/v1/erezept/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_api_v1_erezept.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to get a E-Rezept by Id
    ///
    /// - Remark: HTTP `GET /api/v1/erezept/{id}`.
    /// - Remark: Generated from `#/paths//api/v1/erezept/{id}/get`.
    public enum get_api_v1_erezept__id_ {
        public static let id: String = "get/api/v1/erezept/{id}"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) { self.id = id }
            }

            public var path: Operations.get_api_v1_erezept__id_.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.get_api_v1_erezept__id_.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_Device_Token: Components.Parameters.X_Device_Token_Header
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_Device_Token:
                public init(X_Device_Token: Components.Parameters.X_Device_Token_Header) {
                    self.X_Device_Token = X_Device_Token
                }
            }

            public var headers: Operations.get_api_v1_erezept__id_.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_api_v1_erezept__id_.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_api_v1_erezept__id_.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_api_v1_erezept__id_.Input.Path,
                query: Operations.get_api_v1_erezept__id_.Input.Query = .init(),
                headers: Operations.get_api_v1_erezept__id_.Input.Headers,
                cookies: Operations.get_api_v1_erezept__id_.Input.Cookies = .init(),
                body: Operations.get_api_v1_erezept__id_.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v1_erezept__id_.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.ERezept_v1)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v1_erezept__id_.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_erezept__id_.Output.Ok.Headers = .init(),
                    body: Operations.get_api_v1_erezept__id_.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Returns the E-Rezept for the given id
            ///
            /// - Remark: Generated from `#/paths//api/v1/erezept/{id}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_api_v1_erezept__id_.Output.Ok)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v1_erezept__id_.Output.NotFound.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.get_api_v1_erezept__id_.Output.NotFound.Body?
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_erezept__id_.Output.NotFound.Headers = .init(),
                    body: Operations.get_api_v1_erezept__id_.Output.NotFound.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// E-Rezept not found
            ///
            /// - Remark: Generated from `#/paths//api/v1/erezept/{id}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.get_api_v1_erezept__id_.Output.NotFound)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.get_api_v1_erezept__id_.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v1_erezept__id_.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_erezept__id_.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.get_api_v1_erezept__id_.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//api/v1/erezept/{id}/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_api_v1_erezept__id_.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Get all E-Rezepte
    ///
    /// - Remark: HTTP `GET /api/v2/erezept`.
    /// - Remark: Generated from `#/paths//api/v2/erezept/get`.
    public enum get_api_v2_erezept {
        public static let id: String = "get/api/v2/erezept"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.get_api_v2_erezept.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.get_api_v2_erezept.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_Device_Token: Components.Parameters.X_Device_Token_Header
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_Device_Token:
                public init(X_Device_Token: Components.Parameters.X_Device_Token_Header) {
                    self.X_Device_Token = X_Device_Token
                }
            }

            public var headers: Operations.get_api_v2_erezept.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_api_v2_erezept.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_api_v2_erezept.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_api_v2_erezept.Input.Path = .init(),
                query: Operations.get_api_v2_erezept.Input.Query = .init(),
                headers: Operations.get_api_v2_erezept.Input.Headers,
                cookies: Operations.get_api_v2_erezept.Input.Cookies = .init(),
                body: Operations.get_api_v2_erezept.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v2_erezept.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json([Components.Schemas.ERezept_v2])
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v2_erezept.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v2_erezept.Output.Ok.Headers = .init(),
                    body: Operations.get_api_v2_erezept.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Returns a list of E-Rezepte
            ///
            /// - Remark: Generated from `#/paths//api/v2/erezept/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_api_v2_erezept.Output.Ok)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v2_erezept.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v2_erezept.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v2_erezept.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.get_api_v2_erezept.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//api/v2/erezept/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_api_v2_erezept.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to get a E-Rezept by Id
    ///
    /// - Remark: HTTP `GET /api/v2/erezept/{id}`.
    /// - Remark: Generated from `#/paths//api/v2/erezept/{id}/get`.
    public enum get_api_v2_erezept__id_ {
        public static let id: String = "get/api/v2/erezept/{id}"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) { self.id = id }
            }

            public var path: Operations.get_api_v2_erezept__id_.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }

            public var query: Operations.get_api_v2_erezept__id_.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_Device_Token: Components.Parameters.X_Device_Token_Header
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_Device_Token:
                public init(X_Device_Token: Components.Parameters.X_Device_Token_Header) {
                    self.X_Device_Token = X_Device_Token
                }
            }

            public var headers: Operations.get_api_v2_erezept__id_.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_api_v2_erezept__id_.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_api_v2_erezept__id_.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_api_v2_erezept__id_.Input.Path,
                query: Operations.get_api_v2_erezept__id_.Input.Query = .init(),
                headers: Operations.get_api_v2_erezept__id_.Input.Headers,
                cookies: Operations.get_api_v2_erezept__id_.Input.Cookies = .init(),
                body: Operations.get_api_v2_erezept__id_.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v2_erezept__id_.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.ERezept_v2)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v2_erezept__id_.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v2_erezept__id_.Output.Ok.Headers = .init(),
                    body: Operations.get_api_v2_erezept__id_.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Returns the E-Rezept for the given id
            ///
            /// - Remark: Generated from `#/paths//api/v2/erezept/{id}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_api_v2_erezept__id_.Output.Ok)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v2_erezept__id_.Output.NotFound.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.get_api_v2_erezept__id_.Output.NotFound.Body?
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v2_erezept__id_.Output.NotFound.Headers = .init(),
                    body: Operations.get_api_v2_erezept__id_.Output.NotFound.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// E-Rezept not found
            ///
            /// - Remark: Generated from `#/paths//api/v2/erezept/{id}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.get_api_v2_erezept__id_.Output.NotFound)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.get_api_v2_erezept__id_.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v2_erezept__id_.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v2_erezept__id_.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.get_api_v2_erezept__id_.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//api/v2/erezept/{id}/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_api_v2_erezept__id_.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }

    /// Method to get Notfalldaten by patient identifier
    ///
    /// - Remark: HTTP `GET /api/v1/notfalldaten`.
    /// - Remark: Generated from `#/paths//api/v1/notfalldaten/get`.
    public enum get_api_v1_notfalldaten {
        public static let id: String = "get/api/v1/notfalldaten"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }

            public var path: Operations.get_api_v1_notfalldaten.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var patientIdentifier: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - patientIdentifier:
                public init(patientIdentifier: Swift.String) {
                    self.patientIdentifier = patientIdentifier
                }
            }

            public var query: Operations.get_api_v1_notfalldaten.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_Device_Token: Components.Parameters.X_Device_Token_Header
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_Device_Token:
                public init(X_Device_Token: Components.Parameters.X_Device_Token_Header) {
                    self.X_Device_Token = X_Device_Token
                }
            }

            public var headers: Operations.get_api_v1_notfalldaten.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }

            public var cookies: Operations.get_api_v1_notfalldaten.Input.Cookies
            public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.get_api_v1_notfalldaten.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.get_api_v1_notfalldaten.Input.Path = .init(),
                query: Operations.get_api_v1_notfalldaten.Input.Query,
                headers: Operations.get_api_v1_notfalldaten.Input.Headers,
                cookies: Operations.get_api_v1_notfalldaten.Input.Cookies = .init(),
                body: Operations.get_api_v1_notfalldaten.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }

        public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v1_notfalldaten.Output.Ok.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Notfalldaten)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v1_notfalldaten.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_notfalldaten.Output.Ok.Headers = .init(),
                    body: Operations.get_api_v1_notfalldaten.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Returns the Notfalldaten for the given patient identifier
            ///
            /// - Remark: Generated from `#/paths//api/v1/notfalldaten/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_api_v1_notfalldaten.Output.Ok)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers: Operations.get_api_v1_notfalldaten.Output.NotFound.Headers
                public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.get_api_v1_notfalldaten.Output.NotFound.Body?
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_notfalldaten.Output.NotFound.Headers = .init(),
                    body: Operations.get_api_v1_notfalldaten.Output.NotFound.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Notfalldaten not found
            ///
            /// - Remark: Generated from `#/paths//api/v1/notfalldaten/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.get_api_v1_notfalldaten.Output.NotFound)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }

                /// Received HTTP response headers
                public var headers:
                    Operations.get_api_v1_notfalldaten.Output.InternalServerError.Headers
                public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.WebServiceError)
                }

                /// Received HTTP response body
                public var body: Operations.get_api_v1_notfalldaten.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.get_api_v1_notfalldaten.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.get_api_v1_notfalldaten.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }

            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//api/v1/notfalldaten/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_api_v1_notfalldaten.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
