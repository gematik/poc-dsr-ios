// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
public struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    public init(
        serverURL: URL,
        configuration: Configuration = .init(),
        transport: ClientTransport,
        middlewares: [ClientMiddleware] = []
    ) {
        client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }

    private var converter: Converter { client.converter }
    /// Get all E-Rezepte
    ///
    /// - Remark: HTTP `GET /api/v1/erezept`.
    /// - Remark: Generated from `#/paths//api/v1/erezept/get`.
    public func get_api_v1_erezept(_ input: Operations.get_api_v1_erezept.Input) async throws
        -> Operations.get_api_v1_erezept.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_api_v1_erezept.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/api/v1/erezept",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "X-Device-Token",
                    value: input.headers.X_Device_Token
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_api_v1_erezept.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v1_erezept.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            [Components.Schemas.ERezept_v1].self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 500:
                    let headers: Operations.get_api_v1_erezept.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v1_erezept.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to get a E-Rezept by Id
    ///
    /// - Remark: HTTP `GET /api/v1/erezept/{id}`.
    /// - Remark: Generated from `#/paths//api/v1/erezept/{id}/get`.
    public func get_api_v1_erezept__id_(_ input: Operations.get_api_v1_erezept__id_.Input)
    async throws -> Operations.get_api_v1_erezept__id_.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_api_v1_erezept__id_.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/api/v1/erezept/{}",
                    parameters: [input.path.id]
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "X-Device-Token",
                    value: input.headers.X_Device_Token
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_api_v1_erezept__id_.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v1_erezept__id_.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.ERezept_v1.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 404:
                    let headers: Operations.get_api_v1_erezept__id_.Output.NotFound.Headers =
                        .init()
                    return .notFound(.init(headers: headers, body: nil))
                case 500:
                    let headers:
                        Operations.get_api_v1_erezept__id_.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v1_erezept__id_.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Get all E-Rezepte
    ///
    /// - Remark: HTTP `GET /api/v2/erezept`.
    /// - Remark: Generated from `#/paths//api/v2/erezept/get`.
    public func get_api_v2_erezept(_ input: Operations.get_api_v2_erezept.Input) async throws
        -> Operations.get_api_v2_erezept.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_api_v2_erezept.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/api/v2/erezept",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "X-Device-Token",
                    value: input.headers.X_Device_Token
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_api_v2_erezept.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v2_erezept.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            [Components.Schemas.ERezept_v2].self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 500:
                    let headers: Operations.get_api_v2_erezept.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v2_erezept.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to get a E-Rezept by Id
    ///
    /// - Remark: HTTP `GET /api/v2/erezept/{id}`.
    /// - Remark: Generated from `#/paths//api/v2/erezept/{id}/get`.
    public func get_api_v2_erezept__id_(_ input: Operations.get_api_v2_erezept__id_.Input)
    async throws -> Operations.get_api_v2_erezept__id_.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_api_v2_erezept__id_.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/api/v2/erezept/{}",
                    parameters: [input.path.id]
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "X-Device-Token",
                    value: input.headers.X_Device_Token
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_api_v2_erezept__id_.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v2_erezept__id_.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.ERezept_v2.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 404:
                    let headers: Operations.get_api_v2_erezept__id_.Output.NotFound.Headers =
                        .init()
                    return .notFound(.init(headers: headers, body: nil))
                case 500:
                    let headers:
                        Operations.get_api_v2_erezept__id_.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v2_erezept__id_.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }

    /// Method to get Notfalldaten by patient identifier
    ///
    /// - Remark: HTTP `GET /api/v1/notfalldaten`.
    /// - Remark: Generated from `#/paths//api/v1/notfalldaten/get`.
    public func get_api_v1_notfalldaten(_ input: Operations.get_api_v1_notfalldaten.Input)
    async throws -> Operations.get_api_v1_notfalldaten.Output {
        try await client.send(
            input: input,
            forOperation: Operations.get_api_v1_notfalldaten.id,
            serializer: { input in
                let path = try converter.renderedRequestPath(
                    template: "/api/v1/notfalldaten",
                    parameters: []
                )
                var request: OpenAPIRuntime.Request = .init(path: path, method: .get)
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "X-Device-Token",
                    value: input.headers.X_Device_Token
                )
                try converter.setQueryItemAsText(
                    in: &request,
                    name: "patientIdentifier",
                    value: input.query.patientIdentifier
                )
                try converter.setHeaderFieldAsText(
                    in: &request.headerFields,
                    name: "accept",
                    value: "application/json"
                )
                return request
            },
            deserializer: { response in
                switch response.statusCode {
                case 200:
                    let headers: Operations.get_api_v1_notfalldaten.Output.Ok.Headers = .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v1_notfalldaten.Output.Ok.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.Notfalldaten.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .ok(.init(headers: headers, body: body))
                case 404:
                    let headers: Operations.get_api_v1_notfalldaten.Output.NotFound.Headers =
                        .init()
                    return .notFound(.init(headers: headers, body: nil))
                case 500:
                    let headers:
                        Operations.get_api_v1_notfalldaten.Output.InternalServerError.Headers =
                        .init()
                    try converter.validateContentTypeIfPresent(
                        in: response.headerFields,
                        substring: "application/json"
                    )
                    let body: Operations.get_api_v1_notfalldaten.Output.InternalServerError.Body =
                        try converter.getResponseBodyAsJSON(
                            Components.Schemas.WebServiceError.self,
                            from: response.body,
                            transforming: { value in .json(value) }
                        )
                    return .internalServerError(.init(headers: headers, body: body))
                default: return .undocumented(statusCode: response.statusCode, .init())
                }
            }
        )
    }
}
